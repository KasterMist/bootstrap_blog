[{"authors":[],"categories":[{"title":"Note","url":"/categories/note/"}],"content":"本章节将介绍vim的常用语法。\n在命令行中可以输入vimtutor来进行vim学习。\nvim学习参考视频链接: https://www.bilibili.com/video/BV1PL411M7bg/?spm_id_from=333.788\u0026vd_source=302ea1a1118a80c10a5b35e58bd9c8bf\n创建或编辑一个文件: vim filename (如果filename不存在，则创建该文件)\nvim的三种模式 普通模式 (Normal mode) / 命令模式 (Command mode): 默认模式，用于导航、删除、复制等操作。 插入模式 (Insert mode): 用于输入文本。 视图模式 (Visual Mode): 用于文本搜索、筛选。 在普通模式下按下i即可进入插入模式，按下v即可进入视图模式。在插入模式或者视图模式下按下esc即可退出该模式并进入普通模式。\n模式转换的快捷键使用\n普通模式\u0026ndash;\u0026gt;插入模式\n在下方插入一行: o 在上方插入一行: O(大写的o) 在当前光标后插入: a 在当前光标前插入: i 在行尾插入: A 在行首插入: I 特殊模式 replace mode: 输入R即可进入replace模式，此时输入的字符会替换当前字符(即先删除当前字符再输入新的字符) 光标移动 基础部分\n上下左右: 左: h 下: j 上: k 右: l 移动到第一行: gg 移动到做后一行/指定行: G 行数+大写G跳到指定行 进阶部分\n移动到下一个单词的开头: w 移动到下一个单词的结尾: e 移动到上一个单词的开头: b 移动行首: 0 (数字零) 移动到第一个非空字符: ^ 移动到行尾: $ 移动到匹配的括号处: % 移动到变量定义处: gd 移动到前一个没有匹配的左大括号处: [{ 移动到下一个没有匹配的右大括号处: ]} 修改大小写(如果是大写，则修改为小写。如果是小写，则修改为大写): ~ 保存与退出 保存: :w 退出: :q 保存+退出: :wq 强制退出(不保存): :q! 在vim里面运行命令行: :!后带命令，可以将:后的!理解为允许vim执行外部命令。 在visual mode中选取多行后，可以通过:w filename将选取的行保存到filename当中。 提取、合并文件 在当前位置插入另外文件的内容: :r filename :r也可以读取外部命令的输出，比如可以通过:r!ls来将ls的输出放置到当前光标下面 复制粘贴, 替换修改 复制: yy 粘贴: p 使用dd删除的行使用p也可以进行粘贴 将当前光标下的字符替换为想要的字符: r后加上一个字符 字符c的功能: 更改字符 使用方式: c [number] motion，motion则是之前常用的动作参数。使用后会自动转换到插入模式。 从光标处删除两个单词并自动转换到插入模式进行修改: c2w 从光标处删除到行尾柄并自动转换到插入模式进行修改:c$ 该变文本直到一个单词的末尾并自动转换到插入模式进行修改: ce 定位 输入Ctrl-G即可得知当前光标所在行位置以及文件信息 光标跳转到最后一行: G 光标跳转到第一行: gg 跳转到指定行: number G 撤销 撤销: u 撤销一整行的修改: U 重写: Ctrl-R 删除 删除整行: dd 删除当前字符: x 删除到行尾: D 在visual mode中选取文本内容后可以通过输入d删除选中的文本内容。 组合快捷键 删除两个单词: d2w 删除单词，执行两次: 2dw 删除两个单词，执行两次: 2d2w 在视图模式下选中后5行删除: d5j 搜索替换 在当前光标下搜索下一个匹配的信息: / + 匹配的信息 在当前光标下搜索上一个匹配的信息: ? + 匹配的信息 搜索之后跳转到下一个匹配的信息: n 搜索之后跳转到上一个匹配的信息: N 快速搜索当前光标的单词: 向后 * 向前 #，之后也可以使用n和N来改变方向 将range范围内的from替换为to： :[range]s/from/to/[flags] 在要查找的内容后面加上“\\c”（不区分大小写）或“\\C”（区分大小写），比如/+匹配的信息后面加上\\c或\\C或者在:[range]s/from/to/[flags]的from后加上\\c或\\C range列表\nRange Description Example 21 line 21 :21s/old/new/g 1 first line :1s/old/new/g $ last line :$s/old/new/g % all lines, same as 1,$ :%s/old/new/g 21,25 lines 21 to 25 :21,25s/old/new/g 21,$ lines 21 to end :21,$s/old/new/g .,$ current line to end :.,$s/old/new/g .+1,$ line after current line to end :.+1,$s/old/new/g .,.+5 six lines (current to current +5 inclusive) :.,.+5s/old/new/g .,.5 same (.5 is intepreted as .+5) :.,.5s/old/new/g 有些特殊符号需要在前面加上\\才能识别。\n需要注意的是，如果同一行有多个能匹配到的位置，替换的话只会替换第一个匹配的信息。添加flag: g可以实现每一行中所有匹配的替换(比如上面range列表中的最后的/g)。\nflag list\nflag 作用 \u0026amp; 复用上次替换命令的flags g 替换每行的所有匹配值(默认没有g的情况下只会替换每行的第一个匹配值) c 替换前需确认 e 替换失败时不报错 i 大小写不敏感 I 大小写敏感 此外，使用sed可以直接将某个文件里面的某个信息替换为另一个信息: sed -i \u0026quot;[range]s/from/to/[flags]\u0026quot; filename就是将filename文件中的from替换为to。-i表示在文件内更改。否则更改结果只会在终端中打印出来。\n分窗口 生成水平的窗口: :sp 生成垂直窗口: :vsp 移动到另一个窗口操作: Ctrl-W + [hjkl] 滚动窗口 Ctrl+E - 向下滚动窗口一行，不移动光标。 Ctrl+Y - 向上滚动窗口一行，不移动光标。 Ctrl+D - 向下滚动半个屏幕。 Ctrl+U - 向上滚动半个屏幕。 Ctrl+F - 向下滚动一个整屏幕。 Ctrl+B - 向上滚动一个整屏幕。 zz - 将当前行移至窗口中央，光标位置不变。 zt - 将当前行移至窗口顶部，光标位置不变。 zb - 将当前行移至窗口底部，光标位置不变。 生成标签 (便于跳转) 生成的标签可以是小写字母a-z或者大写字母a-z，也可以是数字0-9。小写字母的标记，仅用于当前缓冲区；而大写字母的标记和数字0-9的标记，则可以跨越不同的缓冲区。小写字母的标签可以被delmarks!删除，大写字母和0-9不行。大写字母和0-9只能通过delmarks character来进行删除\n生成一个标签a: ma 跳转到标签a所在位置: ``a` 跳转到标签a所在的行首: 'a 查找所有的标签: :marks 删除标签a: :delmarks a 删除a-z的标签: :delmarks a-z 删除A-Z的标签: :delmarks A-Z 删除所有标签(不包括大写的标签): :delmarks! 注释代码 可以使用visual block模式来注释多行代码\nvisual block: Ctrl V 在visual block模式下通过[hjkl]选中多行后，使用I来进行插入，例如输入//然后Esc即可实现多行注释。 使用注释插件\nhttps://github.com/tpope/vim-commentary\nmkdir -p ~/.vim/pack/tpope/start cd ~/.vim/pack/tpope/start git clone https://tpope.io/vim/commentary.git vim -u NONE -c \u0026#34;helptags commentary/doc\u0026#34; -c q Use gcc to comment out a line (takes a count), gc to comment out the target of a motion.\n代码补全 在vim中自带了基础的自动补全功能。但该功能的局限之处在于，只能补全之前已经出现过的单词。当写好了单词一部分后，输入Ctrl-N，自动补全功能会出现提供匹配列表、完成补全、匹配失败等三种不同的情况。\n代码跳转 可以下载ctags来跳转到某对象的定义位置。\n在代码所在路径下输入ctags -R .可以创建代码关联的文件tag。\n默认情况下在一个代码文件里面使用关联只能在当前路径下寻找关联，在～/.vimrc里面添加set tags=./tags;,tags可以寻找tag文件路径下所有的位置是否有关联。\nvim打开文件后，在对应的声明的地方按Ctrl-]就可以自动跳转到对象的定义的文件的对应位置。\n直接查找某个对象(比如class_name)的定义的文件以及对应位置: vim -t class_name\nvim相关的插件 插件网站: https://vimawesome.com/\nvim-plug插件管理工具\ngithub链接: https://github.com/junegunn/vim-plug?tab=readme-ov-file\n安装教程: https://github.com/junegunn/vim-plug/wiki/tutorial\nvim-plug是一个基于Rust编写的vim插件管理工具，可以轻松下载需要的vim有关的插件。\n安装方式 (Unix):\ncurl -fLo ~/.vim/autoload/plug.vim --create-dirs \\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim 之后在打开~/.vimrc文件添加下面的信息：\n\u0026#34; Plugins will be downloaded under the specified directory. call plug#begin(has(\u0026#39;nvim\u0026#39;) ? stdpath(\u0026#39;data\u0026#39;) . \u0026#39;/plugged\u0026#39; : \u0026#39;~/.vim/plugged\u0026#39;) \u0026#34; Declare the list of plugins. Plug \u0026#39;tpope/vim-sensible\u0026#39; Plug \u0026#39;junegunn/seoul256.vim\u0026#39; \u0026#34; List ends here. Plugins become visible to Vim after this call. call plug#end() 之后重启vim就可以使用Plugin插件。在vim打开文件内输入:Pluginstall即可下载~/.vimrc中声明的插件。输入:PluginUpdate可以更新~/.vimrc中新添加的插件。输入:PlugClean可以清楚~/.vimrc中被删除的插件。\nfzf.vim https://github.com/junegunn/fzf.vim\n该插件包含了fzf的很多功能，并且移植到了vim中。可以使用诸如:Ag等功能。详情可以查看上面的源码链接。\nNERDTree NERDTree可以在vim打开文件后在左边栏显示当前路径下的文件。\nvim打开文件后输入:NERDTree即可在左边栏显示当前路径下的文件信息。左边栏可以选择目录中不同文件，按ENTER即可显示选中的文件信息。 光标左右界面跳转: Ctrl-WW 在对应的vim界面命令行模式下输入退出命令，q!或wq，即可退出对应的界面。 在~/.vimrc中添加autocmd VimEnter * NERDTree即可在vim打开文件后自动开启NERDTree插件。 EasyComplete https://zhuanlan.zhihu.com/p/366496399\n超轻量级的vim代码补全工具，如果想要更全面的补全功能，可以尝试coc\nvim-colors-solarized https://vimawesome.com/plugin/vim-colors-solarized-ours\nvim 文本编辑器的精确配色方案\n","date":"April 13, 2024","img":"https://KasterMist.com/images/vim.png","lang":"en","langName":"English","largeImg":"","permalink":"/posts/linux/vim/","series":[],"smallImg":"","tags":[{"title":"Linux","url":"/tags/linux/"},{"title":"Linux Command","url":"/tags/linux-command/"}],"timestamp":1712966400,"title":"Vim"},{"authors":[],"categories":[{"title":"Note","url":"/categories/note/"}],"content":"基础命令 查询文件和子目录 ls 查询文件和子目录的最简单的命令是ls。它可以列出当前目录的文件和子目录。常用的指令有:\nls /path/to/directory 列出指定目录中的文件和子目录 ls -a列出隐藏文件和子目录 ls -l以详细格式列出文件和子目录，包含读写权限、创建时间等信息 查询当前工作目录的绝对路径 pwd 查询当前工作目录的绝对路径是pwd\n改变当前工作目录 cd 使用cd可更改当前工作目录，可以在当前目录下使用cd subpath进入子目录，也可以使用cd absolutePath进入绝对路径目录下。\n使用cd ..可移动到上一级目录。\n创建目录 mkdir mkdir 命令用于创建一个新的目录。\nmkdir directory在当前目录下创建一个directory的子目录 mkdir -p /path/to/new/directory如果要递归创建目录的话，需要加上-pflag 删除目录 rmdir rmdir只能用于删除空的目录，如果是非空目录，则需要时用rm\nrmdir -v /path/subpath会删除path里面的subpath子目录，同时显示详细的输出。 rmdir -p /path/subpath会首先删除path里面的subpath子目录，之后会尝试删除path目录。 创建空文件 touch touch filename创建一个名叫filename的空文件。 touch -c filename如果文件已经存在，则不创建该文件。这样可以避免意外覆盖现有文件。 复制文件和目录 cp 语法: cp [option] source destination\ncp old_path/old_file.txt new_path/new_file.txt将old_path的old_file.txt以new_file.txt的名字复制到new_path中。如果不更改名字的话，destination可以只写new_path cp -r old_path/old_sub_path new_path/new_subpath递归复制整个目录 移动或者重命名文件和目录 mv 语法: mv [options] source destination\nmv old_path/old_file.txt new_path/new_file.txt将old_path的old_file.txt以new_file.txt的名字移动到new_path中。 mv -i old_path/old_file.txt new_path/new_file.txt在覆盖目标位置的任何现有文件前提示。这样可以防止意外覆盖数据。 mv old_file.txt new_file.txt可以通过mv在同一路径下重命名old_file.txt为new_file.txt。 移除文件和目录 rm rm在使用时需要格外小心，因为恢复使用rm删除的文件和目录会非常困难。\nrm -r name递归删除目录，包括目录里面的所有内容。\nrm -f name强制删除并抑制所有提示。\nrm -i name在删除每个文件或目录前提示确认，以防意外删除。\n比如使用rm -rf path可以强制删除path路径和path里面的所有内容。\n在目录层次结构中搜索文件 find 语法: find [path] [critical]\n示例\nfind . -name example.txt: 查找当前目录及其子目录中所有名为 example.txt 的文件 find /home -type f: 查找 /home 目录中所有的普通文件 find / -type f -size +1M: 查找文件大小大于 1MB 的文件 find / -name name: 在/路径下查找名字为name的文件 使用条件匹配搜索文本 grep 语法: grep [options] pattern [files]\n示例\ngrep \u0026quot;a\u0026quot; example.txt搜索example.txt中\u0026quot;a\u0026quot;这个单词。 grep -c \u0026quot;a\u0026quot; example.txt搜索example.txt中\u0026quot;a\u0026quot;这个单词出现的次数。 比较文件 diff 语法: diff [options] file1 file2\n用于比较两个文件的差异\ndiff original.txt updated.txt比较 original.txt和updated.txt两个文件的差异，会输出产生差异的不同行。\n字数统计 wc wc -l example.txt: 只打印行计数\nwc -w example.txt: 只打印字数\nwc -c example.txt: 只打印字节数\n历史命令 history 使用history可以查看之前输入过的命令语句。每个命令前面都有一个编号。你可以使用 ! 加上命令编号来执行历史记录中的命令，比如!123来执行第123号的命令。还可以使用 !! 来执行最后一个命令，或者使用 !string 来执行最近包含字符串 string 的命令。\n使用 history -c 命令来清除命令历史记录。\n文件权限命令 更改文件模式或访问权限 chmod 文件的权限包括：只读(r)，写入(w)，执行(x)。\n模式：指定要修改的权限模式。权限模式可以使用数字表示，也可以使用符号表示。\n数字表示：使用三位数字（0-7）表示权限。每一位数字代表一个权限位，分别对应于读（4）、写（2）和执行（1）权限。例如，755 表示所有者具有读、写和执行权限，组和其他用户具有读和执行权限。 符号表示：使用符号来表示权限。符号表示包括以下几个部分： 操作符：可以是 +（添加权限）、-（删除权限）或 =（设置权限）。 权限范围：可以是 u（所有者）、g（组）、o（其他用户）或 a（所有用户）。 权限类型：可以是 r（读取权限）、w（写入权限）或 x（执行权限）。 例如，u+x 表示为所有者添加执行权限，go-w 表示删除组和其他用户的写入权限。\n示例:\nchmod 644 example.txt: 将文件 example.txt 的权限设置为所有者可读写、组和其他用户只读。 chmod -R 777 documents: 将目录 documents 及其子目录中所有文件的权限设置为所有者可读写执行，组和其他用户可读写执行 (-R用于递归地修改目录及其子目录中的文件权限)。 chmod +x script.sh: 为 script.sh 添加执行权限。 管理命令 查看当前进程信息 ps 用于显示当前正在运行的进程信息。它可以显示当前用户的进程、所有用户的进程或者系统的所有进程。\n显示linux进程 top 动态显示系统的进程信息和资源使用情况。它会实时更新显示当前正在运行的进程列表，并且会以交互式的方式展示系统的 CPU 使用情况、内存使用情况等\n交互式进程浏览 htop htop 命令是 top 命令的改进版本，提供了更加友好和直观的界面，并且支持更多的交互操作。它可以显示更多的进程信息，并且可以通过键盘快捷键进行排序、过滤、查找等操作。\n向进程发送终结信号 kill kill PID: 通过输入PID(进程ID)或程序的二进制名称来终结进程。\nkill -9 name: 通过输入进程名称来终结进程，需要添加-9选项。\n示例: 查找一个进程并终结\nps aux | grep example_process: 使用 ps 命令查找名为 example_process 的进程，述命令会显示包含 example_process 关键词的进程信息，并输出其 PID。 kill PID: 在获取到PID后，即可通过kill PID的方式来终结进程。 报告虚拟内存统计数据 vmstat 打印有关内存、交换、I/O 和 CPU 活动的详细报告。其中包括已用/可用内存、交换入/出、磁盘块读/写和 CPU 进程/闲置时间等指标。\nvmstat -n 5: 每隔5秒更新一次信息。 vmstat -a: 显示活动和非活动内存。 vmstat -s: 显示事件计数器和内存统计信息。 vmstat -S: 以 KB 而不是块为单位输出。 报告CPU和I/O统计数据 iostat 监控并显示 CPU 利用率和磁盘 I/O 指标。其中包括 CPU 负载、IOPS、读/写吞吐量等。\niostat -c: 显示CPU使用率信息。 iostat -t: 为每份报告打印时间戳。 iostat -x: 显示服务时间和等待计数等扩展统计信息。 iostat -d: 显示每个磁盘/分区的详细统计信息，而不是合计总数。 iostat -p: 显示特定磁盘设备的统计信息。 显示可用和已用内存量 free free -b: 以字节为单位显示输出。 free -k: 以KB为单位显示输出结果。 free -m: 以MB为单位显示输出，而不是以字节为单位。 free -h: 以GB、MB等人类可读格式打印统计数据，而不是字节。 有用的Unix插件 fzf 参考资料:https://zhuanlan.zhihu.com/p/41859976\ngithub源码: https://github.com/junegunn/fzf\nfzf是一种非常好用的下拉查找工具，通常需要与其他的命令组合。下面是一些常用的功能:\n单独使用fzf命令会展示当前目录下所有文件列表，可以用键盘上下键或者鼠标点出来选择。 使用vim组合fzf来查找并打开当前目录下的文件: vim $(fzf) 切换当前工作目录: cd $(find * -type d | fzf)，其实现逻辑如下: 使用find命令找出所有的子目录 把子目录列表pipe到fzf上进行选择 再把结果以子命令的形式传给cd 可以将cmd | fzf理解为将列出的结果以fzf下拉查找工具的方式来实现，比如ls | fzf就是会通过下拉查找的方式查看当前路径下(不包括子路径)的文件和文件夹。$(fzf)意味着通过fzf选取的信息将输入到变量当中，比如vim $(fzf)就是通过fzf选取文件后再用vim打开。 切换git分支: git checkout $(git branch -r | fzf) 使用fzf插件补全shell命令 fzf自带一种插件可以通过输入**来自动生成下拉框窗口来补全信息。比如使用cd **然后tab可以使用下拉菜单选择路径。可以在https://github.com/junegunn/fzf搜索“Fuzzy completion for bash and zsh”找到有关的信息。\n如果用的是homebrew，则先通过brew install fzf，然后执行$(brew --prefix)/opt/fzf/install。之后在~/.zshrc的plugins=(...)中添加fzf。之后执行source ~/.zshrc，即可使用。\n我们也可以对FZF_DEFAULT_OPTS进行设置，来自定义fzf的界面，比如FZF_DEFAULT_OPTS=\u0026quot;--height 40% --layout=reverse --preview '(highlight -O ansi {} || cat {}) 2\u0026gt; /dev/null | head -500'\u0026quot;\nag 一个类似于 grep 的代码搜索工具，比grep有更高的性能。ag 在搜索时会自动忽略 .gitignore 中的文件和目录，从而提高搜索效率。它支持正则表达式，高亮显示匹配结果，并且可以直接在你的编辑器中使用。\n在当前目录以及子目录搜索文本: ag \u0026quot;search pattern\u0026quot; 在特定文件类型中搜索: ag \u0026quot;search pattern\u0026quot; --cpp只在HTML文件中搜索 忽略特定文件或目录: ag \u0026quot;search pattern\u0026quot; --ignore dir/*忽略特定目录下的搜索 ag \u0026quot;search pattern\u0026quot; --ignore *.log 忽略所有.log文件 搜索特定目录: ag \u0026quot;search pattern\u0026quot; /path/to/directory 仅显示文件名: ag \u0026quot;search pattern\u0026quot; -l 与grep一样，可以配合其他语句执行，比如cat \u0026quot;filename\u0026quot; | ag \u0026quot;search pattern\u0026quot; 引号可加可不加 ","date":"April 4, 2024","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/posts/linux/linux-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","series":[],"smallImg":"","tags":[{"title":"Linux","url":"/tags/linux/"},{"title":"Linux Command","url":"/tags/linux-command/"}],"timestamp":1712188800,"title":"Linux 常用命令"},{"authors":[],"categories":[],"content":"Hi there, I\u0026rsquo;m XXX.\n","date":"January 1, 1","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/about/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"About"},{"authors":[],"categories":[],"content":"","date":"January 1, 1","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/contact/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"Contact Us"},{"authors":[],"categories":[],"content":"","date":"January 1, 1","img":"","lang":"en","langName":"English","largeImg":"","permalink":"/offline/","series":[],"smallImg":"","tags":[],"timestamp":-62135596800,"title":"Offline"}]
